input CreateFile {
    name: String!
}

input CreateFileInput {
    name: String!
    clientMutationId: String!
}

type CreateFilePayload {
    viewer: Viewer!
    clientMutationId: String!
    file: File
    edge: FileEdge
}

input CreateTransaction {
    amount: Int!
    balanceDue: Int!
    balanceRequired: Int!
    from: String!

    # where the payment goes to
    linkedPayments: Json!
    paymentInfo: Json!
    to: String!
}

input CreateTransactionInput {
    amount: Int!
    balanceDue: Int!
    balanceRequired: Int!
    from: String!

    # where the payment goes to
    linkedPayments: Json!
    paymentInfo: Json!
    to: String!
    clientMutationId: String!
}

type CreateTransactionPayload {
    viewer: Viewer!
    clientMutationId: String!
    transaction: Transaction
    edge: TransactionEdge
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
    user: User
    clientMutationId: String
    viewer: Viewer!
}

scalar DateTime

input DeleteFileInput {
    id: ID!
    clientMutationId: String!
}

type DeleteFilePayload {
    viewer: Viewer!
    clientMutationId: String!
    file: File
    edge: FileEdge
    deletedId: ID
}

input DeleteTransactionInput {
    id: ID!
    clientMutationId: String!
}

type DeleteTransactionPayload {
    viewer: Viewer!
    clientMutationId: String!
    transaction: Transaction
    edge: TransactionEdge
    deletedId: ID
}

input DeleteUserInput {
    id: ID!
    clientMutationId: String!
}

type DeleteUserPayload {
    viewer: Viewer!
    clientMutationId: String!
    user: User
    edge: UserEdge
    deletedId: ID
}

type File implements Node {
    contentType: String!
    createdAt: DateTime!
    id: ID!
    name: String!
    secret: String!
    size: Int!
    updatedAt: DateTime!
    url: String!
}

# A connection to a list of items.
type FileConnection {
    # Information to aid in pagination.
    pageInfo: PageInfo!

    # A list of edges.
    edges: [FileEdge]

    # Count of filtered result set without considering pagination arguments
    count: Int!
}

# An edge in a connection.
type FileEdge {
    # The item at the end of the edge.
    node: File!

    # A cursor for use in pagination.
    cursor: String!
}

input FileFilter {
    # Logical AND on all given filters.
    AND: [FileFilter!]

    # Logical OR on all given filters.
    OR: [FileFilter!]
    contentType: String

    # All values that are not equal to given value.
    contentType_not: String

    # All values that are contained in given list.
    contentType_in: [String!]

    # All values that are not contained in given list.
    contentType_not_in: [String!]

    # All values less than the given value.
    contentType_lt: String

    # All values less than or equal the given value.
    contentType_lte: String

    # All values greater than the given value.
    contentType_gt: String

    # All values greater than or equal the given value.
    contentType_gte: String

    # All values containing the given string.
    contentType_contains: String

    # All values not containing the given string.
    contentType_not_contains: String

    # All values starting with the given string.
    contentType_starts_with: String

    # All values not starting with the given string.
    contentType_not_starts_with: String

    # All values ending with the given string.
    contentType_ends_with: String

    # All values not ending with the given string.
    contentType_not_ends_with: String
    createdAt: DateTime

    # All values that are not equal to given value.
    createdAt_not: DateTime

    # All values that are contained in given list.
    createdAt_in: [DateTime!]

    # All values that are not contained in given list.
    createdAt_not_in: [DateTime!]

    # All values less than the given value.
    createdAt_lt: DateTime

    # All values less than or equal the given value.
    createdAt_lte: DateTime

    # All values greater than the given value.
    createdAt_gt: DateTime

    # All values greater than or equal the given value.
    createdAt_gte: DateTime
    id: ID

    # All values that are not equal to given value.
    id_not: ID

    # All values that are contained in given list.
    id_in: [ID!]

    # All values that are not contained in given list.
    id_not_in: [ID!]

    # All values less than the given value.
    id_lt: ID

    # All values less than or equal the given value.
    id_lte: ID

    # All values greater than the given value.
    id_gt: ID

    # All values greater than or equal the given value.
    id_gte: ID

    # All values containing the given string.
    id_contains: ID

    # All values not containing the given string.
    id_not_contains: ID

    # All values starting with the given string.
    id_starts_with: ID

    # All values not starting with the given string.
    id_not_starts_with: ID

    # All values ending with the given string.
    id_ends_with: ID

    # All values not ending with the given string.
    id_not_ends_with: ID
    name: String

    # All values that are not equal to given value.
    name_not: String

    # All values that are contained in given list.
    name_in: [String!]

    # All values that are not contained in given list.
    name_not_in: [String!]

    # All values less than the given value.
    name_lt: String

    # All values less than or equal the given value.
    name_lte: String

    # All values greater than the given value.
    name_gt: String

    # All values greater than or equal the given value.
    name_gte: String

    # All values containing the given string.
    name_contains: String

    # All values not containing the given string.
    name_not_contains: String

    # All values starting with the given string.
    name_starts_with: String

    # All values not starting with the given string.
    name_not_starts_with: String

    # All values ending with the given string.
    name_ends_with: String

    # All values not ending with the given string.
    name_not_ends_with: String
    secret: String

    # All values that are not equal to given value.
    secret_not: String

    # All values that are contained in given list.
    secret_in: [String!]

    # All values that are not contained in given list.
    secret_not_in: [String!]

    # All values less than the given value.
    secret_lt: String

    # All values less than or equal the given value.
    secret_lte: String

    # All values greater than the given value.
    secret_gt: String

    # All values greater than or equal the given value.
    secret_gte: String

    # All values containing the given string.
    secret_contains: String

    # All values not containing the given string.
    secret_not_contains: String

    # All values starting with the given string.
    secret_starts_with: String

    # All values not starting with the given string.
    secret_not_starts_with: String

    # All values ending with the given string.
    secret_ends_with: String

    # All values not ending with the given string.
    secret_not_ends_with: String
    size: Int

    # All values that are not equal to given value.
    size_not: Int

    # All values that are contained in given list.
    size_in: [Int!]

    # All values that are not contained in given list.
    size_not_in: [Int!]

    # All values less than the given value.
    size_lt: Int

    # All values less than or equal the given value.
    size_lte: Int

    # All values greater than the given value.
    size_gt: Int

    # All values greater than or equal the given value.
    size_gte: Int
    updatedAt: DateTime

    # All values that are not equal to given value.
    updatedAt_not: DateTime

    # All values that are contained in given list.
    updatedAt_in: [DateTime!]

    # All values that are not contained in given list.
    updatedAt_not_in: [DateTime!]

    # All values less than the given value.
    updatedAt_lt: DateTime

    # All values less than or equal the given value.
    updatedAt_lte: DateTime

    # All values greater than the given value.
    updatedAt_gt: DateTime

    # All values greater than or equal the given value.
    updatedAt_gte: DateTime
    url: String

    # All values that are not equal to given value.
    url_not: String

    # All values that are contained in given list.
    url_in: [String!]

    # All values that are not contained in given list.
    url_not_in: [String!]

    # All values less than the given value.
    url_lt: String

    # All values less than or equal the given value.
    url_lte: String

    # All values greater than the given value.
    url_gt: String

    # All values greater than or equal the given value.
    url_gte: String

    # All values containing the given string.
    url_contains: String

    # All values not containing the given string.
    url_not_contains: String

    # All values starting with the given string.
    url_starts_with: String

    # All values not starting with the given string.
    url_not_starts_with: String

    # All values ending with the given string.
    url_ends_with: String

    # All values not ending with the given string.
    url_not_ends_with: String
}

enum FileOrderBy {
    contentType_ASC
    contentType_DESC
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    secret_ASC
    secret_DESC
    size_ASC
    size_DESC
    updatedAt_ASC
    updatedAt_DESC
    url_ASC
    url_DESC
}

# Raw JSON value
scalar Json

type Mutation {
    createFile(input: CreateFileInput!): CreateFilePayload
    createTransaction(input: CreateTransactionInput!): CreateTransactionPayload
    updateFile(input: UpdateFileInput!): UpdateFilePayload
    updateTransaction(input: UpdateTransactionInput!): UpdateTransactionPayload
    updateUser(input: UpdateUserInput!): UpdateUserPayload
    updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
    updateOrCreateTransaction(input: UpdateOrCreateTransactionInput!): UpdateOrCreateTransactionPayload
    updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
    deleteFile(input: DeleteFileInput!): DeleteFilePayload
    deleteTransaction(input: DeleteTransactionInput!): DeleteTransactionPayload
    deleteUser(input: DeleteUserInput!): DeleteUserPayload
    createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
    # The id of the object.
    id: ID!
}

# Information about pagination in a connection.
type PageInfo {
    # When paginating forwards, are there more items?
    hasNextPage: Boolean!

    # When paginating backwards, are there more items?
    hasPreviousPage: Boolean!

    # When paginating backwards, the cursor to continue.
    startCursor: String

    # When paginating forwards, the cursor to continue.
    endCursor: String
}

type Query {
    viewer: Viewer!

    # Fetches an object given its ID
    node(
        # The ID of an object
        id: ID!
    ): Node
}

input SignupUserInput {
    clientMutationId: String!
}

# Transactions for Intuit Relay Modern Class
type Transaction implements Node {
    amount: Int!
    balanceDue: Int!
    balanceRequired: Int!
    createdAt: DateTime!
    from: String!
    id: ID!

    # where the payment goes to
    linkedPayments: Json!
    paymentInfo: Json!
    to: String!
    updatedAt: DateTime!
}

# A connection to a list of items.
type TransactionConnection {
    # Information to aid in pagination.
    pageInfo: PageInfo!

    # A list of edges.
    edges: [TransactionEdge]

    # Count of filtered result set without considering pagination arguments
    count: Int!
}

# An edge in a connection.
type TransactionEdge {
    # The item at the end of the edge.
    node: Transaction!

    # A cursor for use in pagination.
    cursor: String!
}

input TransactionFilter {
    # Logical AND on all given filters.
    AND: [TransactionFilter!]

    # Logical OR on all given filters.
    OR: [TransactionFilter!]
    amount: Int

    # All values that are not equal to given value.
    amount_not: Int

    # All values that are contained in given list.
    amount_in: [Int!]

    # All values that are not contained in given list.
    amount_not_in: [Int!]

    # All values less than the given value.
    amount_lt: Int

    # All values less than or equal the given value.
    amount_lte: Int

    # All values greater than the given value.
    amount_gt: Int

    # All values greater than or equal the given value.
    amount_gte: Int
    balanceDue: Int

    # All values that are not equal to given value.
    balanceDue_not: Int

    # All values that are contained in given list.
    balanceDue_in: [Int!]

    # All values that are not contained in given list.
    balanceDue_not_in: [Int!]

    # All values less than the given value.
    balanceDue_lt: Int

    # All values less than or equal the given value.
    balanceDue_lte: Int

    # All values greater than the given value.
    balanceDue_gt: Int

    # All values greater than or equal the given value.
    balanceDue_gte: Int
    balanceRequired: Int

    # All values that are not equal to given value.
    balanceRequired_not: Int

    # All values that are contained in given list.
    balanceRequired_in: [Int!]

    # All values that are not contained in given list.
    balanceRequired_not_in: [Int!]

    # All values less than the given value.
    balanceRequired_lt: Int

    # All values less than or equal the given value.
    balanceRequired_lte: Int

    # All values greater than the given value.
    balanceRequired_gt: Int

    # All values greater than or equal the given value.
    balanceRequired_gte: Int
    createdAt: DateTime

    # All values that are not equal to given value.
    createdAt_not: DateTime

    # All values that are contained in given list.
    createdAt_in: [DateTime!]

    # All values that are not contained in given list.
    createdAt_not_in: [DateTime!]

    # All values less than the given value.
    createdAt_lt: DateTime

    # All values less than or equal the given value.
    createdAt_lte: DateTime

    # All values greater than the given value.
    createdAt_gt: DateTime

    # All values greater than or equal the given value.
    createdAt_gte: DateTime
    from: String

    # All values that are not equal to given value.
    from_not: String

    # All values that are contained in given list.
    from_in: [String!]

    # All values that are not contained in given list.
    from_not_in: [String!]

    # All values less than the given value.
    from_lt: String

    # All values less than or equal the given value.
    from_lte: String

    # All values greater than the given value.
    from_gt: String

    # All values greater than or equal the given value.
    from_gte: String

    # All values containing the given string.
    from_contains: String

    # All values not containing the given string.
    from_not_contains: String

    # All values starting with the given string.
    from_starts_with: String

    # All values not starting with the given string.
    from_not_starts_with: String

    # All values ending with the given string.
    from_ends_with: String

    # All values not ending with the given string.
    from_not_ends_with: String
    id: ID

    # All values that are not equal to given value.
    id_not: ID

    # All values that are contained in given list.
    id_in: [ID!]

    # All values that are not contained in given list.
    id_not_in: [ID!]

    # All values less than the given value.
    id_lt: ID

    # All values less than or equal the given value.
    id_lte: ID

    # All values greater than the given value.
    id_gt: ID

    # All values greater than or equal the given value.
    id_gte: ID

    # All values containing the given string.
    id_contains: ID

    # All values not containing the given string.
    id_not_contains: ID

    # All values starting with the given string.
    id_starts_with: ID

    # All values not starting with the given string.
    id_not_starts_with: ID

    # All values ending with the given string.
    id_ends_with: ID

    # All values not ending with the given string.
    id_not_ends_with: ID
    to: String

    # All values that are not equal to given value.
    to_not: String

    # All values that are contained in given list.
    to_in: [String!]

    # All values that are not contained in given list.
    to_not_in: [String!]

    # All values less than the given value.
    to_lt: String

    # All values less than or equal the given value.
    to_lte: String

    # All values greater than the given value.
    to_gt: String

    # All values greater than or equal the given value.
    to_gte: String

    # All values containing the given string.
    to_contains: String

    # All values not containing the given string.
    to_not_contains: String

    # All values starting with the given string.
    to_starts_with: String

    # All values not starting with the given string.
    to_not_starts_with: String

    # All values ending with the given string.
    to_ends_with: String

    # All values not ending with the given string.
    to_not_ends_with: String
    updatedAt: DateTime

    # All values that are not equal to given value.
    updatedAt_not: DateTime

    # All values that are contained in given list.
    updatedAt_in: [DateTime!]

    # All values that are not contained in given list.
    updatedAt_not_in: [DateTime!]

    # All values less than the given value.
    updatedAt_lt: DateTime

    # All values less than or equal the given value.
    updatedAt_lte: DateTime

    # All values greater than the given value.
    updatedAt_gt: DateTime

    # All values greater than or equal the given value.
    updatedAt_gte: DateTime
}

enum TransactionOrderBy {
    amount_ASC
    amount_DESC
    balanceDue_ASC
    balanceDue_DESC
    balanceRequired_ASC
    balanceRequired_DESC
    createdAt_ASC
    createdAt_DESC
    from_ASC
    from_DESC
    id_ASC
    id_DESC
    linkedPayments_ASC
    linkedPayments_DESC
    paymentInfo_ASC
    paymentInfo_DESC
    to_ASC
    to_DESC
    updatedAt_ASC
    updatedAt_DESC
}

input UpdateFile {
    id: ID!
    name: String
}

input UpdateFileInput {
    id: ID!
    name: String
    clientMutationId: String!
}

type UpdateFilePayload {
    viewer: Viewer!
    clientMutationId: String!
    file: File
    edge: FileEdge
}

input UpdateOrCreateFileInput {
    update: UpdateFile!
    create: CreateFile!
    clientMutationId: String!
}

type UpdateOrCreateFilePayload {
    viewer: Viewer!
    clientMutationId: String!
    file: File
    edge: FileEdge
}

input UpdateOrCreateTransactionInput {
    update: UpdateTransaction!
    create: CreateTransaction!
    clientMutationId: String!
}

type UpdateOrCreateTransactionPayload {
    viewer: Viewer!
    clientMutationId: String!
    transaction: Transaction
    edge: TransactionEdge
}

input UpdateOrCreateUserInput {
    update: UpdateUser!
    clientMutationId: String!
}

type UpdateOrCreateUserPayload {
    viewer: Viewer!
    clientMutationId: String!
    user: User
    edge: UserEdge
}

input UpdateTransaction {
    amount: Int
    balanceDue: Int
    balanceRequired: Int
    from: String
    id: ID!

    # where the payment goes to
    linkedPayments: Json
    paymentInfo: Json
    to: String
}

input UpdateTransactionInput {
    amount: Int
    balanceDue: Int
    balanceRequired: Int
    from: String
    id: ID!

    # where the payment goes to
    linkedPayments: Json
    paymentInfo: Json
    to: String
    clientMutationId: String!
}

type UpdateTransactionPayload {
    viewer: Viewer!
    clientMutationId: String!
    transaction: Transaction
    edge: TransactionEdge
}

input UpdateUser {
    id: ID!
}

input UpdateUserInput {
    id: ID!
    clientMutationId: String!
}

type UpdateUserPayload {
    viewer: Viewer!
    clientMutationId: String!
    user: User
    edge: UserEdge
}

type User implements Node {
    createdAt: DateTime!
    id: ID!
    updatedAt: DateTime!
}

# A connection to a list of items.
type UserConnection {
    # Information to aid in pagination.
    pageInfo: PageInfo!

    # A list of edges.
    edges: [UserEdge]

    # Count of filtered result set without considering pagination arguments
    count: Int!
}

# An edge in a connection.
type UserEdge {
    # The item at the end of the edge.
    node: User!

    # A cursor for use in pagination.
    cursor: String!
}

input UserFilter {
    # Logical AND on all given filters.
    AND: [UserFilter!]

    # Logical OR on all given filters.
    OR: [UserFilter!]
    createdAt: DateTime

    # All values that are not equal to given value.
    createdAt_not: DateTime

    # All values that are contained in given list.
    createdAt_in: [DateTime!]

    # All values that are not contained in given list.
    createdAt_not_in: [DateTime!]

    # All values less than the given value.
    createdAt_lt: DateTime

    # All values less than or equal the given value.
    createdAt_lte: DateTime

    # All values greater than the given value.
    createdAt_gt: DateTime

    # All values greater than or equal the given value.
    createdAt_gte: DateTime
    id: ID

    # All values that are not equal to given value.
    id_not: ID

    # All values that are contained in given list.
    id_in: [ID!]

    # All values that are not contained in given list.
    id_not_in: [ID!]

    # All values less than the given value.
    id_lt: ID

    # All values less than or equal the given value.
    id_lte: ID

    # All values greater than the given value.
    id_gt: ID

    # All values greater than or equal the given value.
    id_gte: ID

    # All values containing the given string.
    id_contains: ID

    # All values not containing the given string.
    id_not_contains: ID

    # All values starting with the given string.
    id_starts_with: ID

    # All values not starting with the given string.
    id_not_starts_with: ID

    # All values ending with the given string.
    id_ends_with: ID

    # All values not ending with the given string.
    id_not_ends_with: ID
    updatedAt: DateTime

    # All values that are not equal to given value.
    updatedAt_not: DateTime

    # All values that are contained in given list.
    updatedAt_in: [DateTime!]

    # All values that are not contained in given list.
    updatedAt_not_in: [DateTime!]

    # All values less than the given value.
    updatedAt_lt: DateTime

    # All values less than or equal the given value.
    updatedAt_lte: DateTime

    # All values greater than the given value.
    updatedAt_gt: DateTime

    # All values greater than or equal the given value.
    updatedAt_gte: DateTime
}

enum UserOrderBy {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    updatedAt_ASC
    updatedAt_DESC
}

# This is the famous Relay viewer object
type Viewer {
    allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
    allTransactions(filter: TransactionFilter, orderBy: TransactionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
    allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
    user: User
    File(id: ID, secret: String, url: String): File
    Transaction(id: ID): Transaction
    User(id: ID): User
    id: ID!
}
